#Basic concepts


Coding
A . Give an example of code smell (1) that usually happened in OOP. Explain and give the preventive action

Answer : 
Too many Parameter
Functions can have too many parameters. If they have too many, it makes the function more complicated when reading it and calling it. It probably means that we can clean up the code in some way to make this easier to read.
example : 
const describeFruit = (color, name, size, price, numSeeds, type) => { 
  return `${fruitName} is ${fruitColor}. It's ${fruitSize}. It costs ${price}. It has ${numSeeds}. The type if ${type}`;
}

explain briefly about Dependency Injection, and why is it important ?
Answer : 
Dependency Injection or what is commonly abbreviated as DI is well-known in the programming world after many frameworks have emerged that implement this concept. One of them and the most famous is Spring.
DI is intended so that a class is not closely tied to other classes so that the relationship between parts of the code is loosely coupled.
Interpreted in easy language DI means we give / inject a class to another class which is a dependency (requires it).


Rest API
B . Give 1 example each, of what do’s and don’ts when you handle request while using these method :

POST
Answer : 
 ============== DO =========================
Use POST for destructive actions such as creation
example : 

async function post(req, res, next) {
  try {
    let employee = getEmployeeFromRec(req);
 
    employee = await employees.create(employee);
 
    res.status(201).json(employee);
  } catch (err) {
    next(err);
  }
}

 ================== DON'T ============================
Never use POST request for an unindempotent HTTP request
example : 
        var a = 10;
        a++;  ===> this is not idempotent ,  the result will never same every time it executed.
 
 

GET

======================== DO ================================
use GET for operations which are both safe and idempotent.  GET can be cached and in a browser, refreshed. Over and over and over.
Request: ---> HTTP GET /groceries/list Response: <--- [ 'eggs', 'milk' ]
Request: ---> HTTP GET /groceries/list Response: <--- [ 'eggs', 'milk', 'butter' ]



======================== DON'T ================================

Dont use GET for unindempotent request . This means that if you make the same GET again, you will insert into your database again.
Consider what this may mean if the GET becomes a link and it gets crawled by a search engine. You will have your database full of duplicate data.


